/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode createBinaryTree(int[][] descriptions) {
        HashMap<Integer,TreeNode> map=new HashMap<>();
        HashSet<Integer> set=new HashSet<>();
        TreeNode root=new TreeNode(-1);
        for(int[] ar: descriptions){
            if(map.containsKey(ar[0])&&map.containsKey(ar[1])){
                TreeNode pp=map.get(ar[0]);
                TreeNode cc=map.get(ar[1]);
                if(root==pp || root==cc) root=pp;
                if(ar[2]==1) pp.left=cc;
                else pp.right=cc;
            }
            else if(map.containsKey(ar[0])){
                TreeNode curr=map.get(ar[0]);
                TreeNode ch=new TreeNode(ar[1]);
                map.put(ar[1],ch);
                if(ar[2]==1) curr.left=ch;
                else curr.right=ch;

            }
            else if(map.containsKey(ar[1])){
                TreeNode p=new TreeNode(ar[0]);
                TreeNode c=map.get(ar[1]);
                if(root==c) root=p;
                map.put(ar[0],p);
                if(ar[2]==1) p.left=c;
                else p.right=c;
            }
            
            else{
                TreeNode par=new TreeNode(ar[0]);
                if(root.val==-1) root=par;
                TreeNode child=new TreeNode(ar[1]);
                if(ar[2]==1) par.left=child;
                if(ar[2]==0) par.right=child;
                map.put(ar[0],par);
                map.put(ar[1],child);
            }
            set.add(ar[1]);
        }
        int temp=-1;
        for(int []ar: descriptions){
            if(!set.contains(ar[0])){
                temp=ar[0];
                root=map.get(temp);
                break;
            }
        }
        return root;
    }
}
